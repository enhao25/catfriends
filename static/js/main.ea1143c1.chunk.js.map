{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","cats","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","this","filteredCats","filter","cat","toLocaleLowerCase","includes","length","fetch","then","response","json","users","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAA1B,4BAC1B,6BACI,4BAAKF,GACL,2BAAIC,MCQLK,EAbE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACTC,EAAaD,EAAKE,KAAI,SAACC,EAAMC,GAG/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAKI,GAAGT,GAAIF,KAAMO,EAAKI,GAAGX,KAAMC,MAAOM,EAAKI,GAAGV,WAE5E,OACI,6BACKO,ICEEK,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OAGX,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,cAC1EC,SAAUH,MCGXI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrCH,EAAMI,WCmDJC,G,kBA/CX,aAAc,IAAD,8BACT,+CAUJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAX1C,EAAKC,MAAQ,CACTxB,KAAM,GACNqB,YAAa,IAJR,E,sEAiBJ,IAAD,EAC0BI,KAAKD,MAA3BxB,EADJ,EACIA,KAAMqB,EADV,EACUA,YACRK,EAAe1B,EAAK2B,QAAO,SAAAC,GAC7B,OAAOA,EAAInC,KAAKoC,oBAAoBC,SAAST,EAAYQ,wBAE7D,OAAoB,IAAhB7B,EAAK+B,OACE,uCAIH,yBAAKnC,UAAU,MACX,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWW,aAAgBkB,KAAKP,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,KAAM0B,Q,0CAOhB,IAAD,OAEfM,MAAM,8CACDC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKhB,SAAS,CAACpB,KAAMoC,W,GA7C/BC,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.ea1143c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robot_photo\" src={`https://robohash.org/${id}?size=240x240&set=set4`} />\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({cats}) => {\r\n    const cardsArray = cats.map((user, i) => {\r\n        // {console.log(user)}\r\n        // The key is like an id for jsx. It should be something that doesn't change and is unique (E.g. ID)\r\n        return <Card key={i} id={cats[i].id} name={cats[i].name} email={cats[i].email} />\r\n    })\r\n    return(\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            {/* onchange doesn't work, only onChange works \r\n            Thus, everytime onChange happens, it will run the searchChange function that was define in App.js*/}\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search cats\" \r\n                onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    // Constructor of the App, according to react lifecycle, constructor will run first when running the web\r\n    // As the class has state, we can call them smart component\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            cats: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    // Function\r\n    // Use the below syntax instead of onSearchChange(event), else this will refer to place place it is called\r\n    // which is at the searbox.js \r\n    onSearchChange = (event) => {\r\n        // event.target.value is the value that is keyed in the search box\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    // Render which is mandatory for a class\r\n    render(){\r\n        const { cats, searchfield } = this.state\r\n        const filteredCats = cats.filter(cat =>{\r\n            return cat.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase())\r\n        }) \r\n        if (cats.length === 0){\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f2\">CatFriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange} />\r\n                    <Scroll>\r\n                        <Cardlist cats={filteredCats} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Fetch helps us to get from http, then, get the response and return it, then set the state to cats : users\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {return response.json()})\r\n            .then(users=> {{this.setState({cats: users})}})\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n// State --> An object that describe your application\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}